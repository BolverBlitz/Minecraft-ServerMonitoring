/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */
!(function (t) {
  function e(t, e, n) { return typeof t === 'string' && (t.slice(-1) == '%' ? t = parseInt(t.substring(0, t.length - 1)) / 100 * e : t.slice(-2) == 'vh' ? t = parseInt(t.substring(0, t.length - 2)) / 100 * n : t.slice(-2) == 'px' && (t = parseInt(t.substring(0, t.length - 2)))), t; } const n = t(window); let i = 1; const o = {}; n.on('scroll', () => { const e = n.scrollTop(); t.map(o, (t) => { window.clearTimeout(t.timeoutId), t.timeoutId = window.setTimeout(() => { t.handler(e); }, t.options.delay); }); }).on('load', () => { n.trigger('scroll'); }), jQuery.fn.scrollex = function (l) {
    const s = t(this); if (this.length == 0) return s; if (this.length > 1) { for (let r = 0; r < this.length; r++)t(this[r]).scrollex(l); return s; } if (s.data('_scrollexId')) return s; let a; let u; let h; let c; let p; switch (a = i++, u = jQuery.extend({
      top: 0, bottom: 0, delay: 0, mode: 'default', enter: null, leave: null, initialize: null, terminate: null, scroll: null
    }, l), u.mode) { case 'top': h = function (t, e, n, i, o) { return t >= i && o >= t; }; break; case 'bottom': h = function (t, e, n, i, o) { return n >= i && o >= n; }; break; case 'middle': h = function (t, e, n, i, o) { return e >= i && o >= e; }; break; case 'top-only': h = function (t, e, n, i, o) { return i >= t && n >= i; }; break; case 'bottom-only': h = function (t, e, n, i, o) { return n >= o && o >= t; }; break; default: case 'default': h = function (t, e, n, i, o) { return n >= i && o >= t; }; } return c = function (t) { let i; let o; let l; let s; let r; let a; const u = this.state; let h = !1; const c = this.$element.offset(); i = n.height(), o = t + i / 2, l = t + i, s = this.$element.outerHeight(), r = c.top + e(this.options.top, s, i), a = c.top + s - e(this.options.bottom, s, i), h = this.test(t, o, l, r, a), h != u && (this.state = h, h ? this.options.enter && this.options.enter.apply(this.element) : this.options.leave && this.options.leave.apply(this.element)), this.options.scroll && this.options.scroll.apply(this.element, [(o - r) / (a - r)]); }, p = {
      id: a, options: u, test: h, handler: c, state: null, element: this, $element: s, timeoutId: null
    }, o[a] = p, s.data('_scrollexId', p.id), p.options.initialize && p.options.initialize.apply(this), s;
  }, jQuery.fn.unscrollex = function () { const e = t(this); if (this.length == 0) return e; if (this.length > 1) { for (let n = 0; n < this.length; n++)t(this[n]).unscrollex(); return e; } let i; let l; return (i = e.data('_scrollexId')) ? (l = o[i], window.clearTimeout(l.timeoutId), delete o[i], e.removeData('_scrollexId'), l.options.terminate && l.options.terminate.apply(this), e) : e; };
}(jQuery));
